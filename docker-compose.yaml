volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

services:
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      postgres_database:
        condition: service_healthy
        restart: true
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: gabriel@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 123
    networks:
      - kong-net

  driver_service:
    build: driver
    container_name: driver_service
    ports:
      - 8014:8014
#    depends_on:
#      postgres_database:
#        condition: service_healthy
#        restart: true
    environment:
      - POSTGRES_HOST=postgres_database
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASS=123
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=mikronet
    networks:
      - kong-net

  auth_service:
    build: authentication
    container_name: auth_service
    ports:
      - 8000:8000
    depends_on:
      - auth_database
#        condition: service_healthy
#        restart: true
    environment:
      - DB_HOST=mysql-database
      - DB_USER=root
      - DB_PASSWORD=123
      - DB_PORT=3306
      - DB_DATABASE=mikronet
      - EMAIL_PASSWORD=khzy wosb xckz aihb
      - JWT_SECRET=FV77z4uhQ9M
      - JWT_ISS=PJxFwcJTAcNLDMVcV4AiVROZZ41NYfR8
#    networks:
#      - kong-net

  user_service:
    build: user
    container_name: user_service
    ports:
      - 8010:8010
    depends_on:
      postgres_database:
        condition: service_healthy
        restart: true
    environment:
      - POSTGRES_HOST=postgres_database
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASS=123
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=mikronet
    networks:
      - kong-net

  notification_service:
    build: notification
    container_name: notification_service
    ports:
      - 8015:8015
    depends_on:
      postgres_database:
        condition: service_healthy
        restart: true
    environment:
      - POSTGRES_HOST=postgres_database
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASS=123
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=mikronet
    networks:
      - kong-net

  geolocation_tracking_service:
    build: geolocation_tracking
    container_name: geolocation_tracking_service
    ports:
      - 8016:8016
    depends_on:
      postgres_database:
        condition: service_healthy
        restart: true
    environment:
      - POSTGRES_HOST=postgres_database
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASS=123
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=mikronet
    networks:
      - kong-net

#############################################################################################
# DATABASE CONTAINER

  auth_database:
    image: mysql:latest
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: authentication
    networks:
      - kong-net

  user_database:
    image: mysql:latest
    ports:
      - 3307:3307
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user
    networks:
      - kong-net

  geolocation_database:
    image: postgis/postgis
    container_name: postgres_database
    restart: always
    environment:
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: mikronet
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - ./data/postgis:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kong-net

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=mikronet
      - RABBITMQ_DEFAULT_PASS=123
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - kong-net

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    container_name: kong
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8002:8002/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

networks:
  kong-net:
    external: false

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD