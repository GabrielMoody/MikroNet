// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Businessowner  *businessowner
	Driver         *driver
	DriverLocation *driverLocation
	Order          *order
	Route          *route
	User           *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Businessowner = &Q.Businessowner
	Driver = &Q.Driver
	DriverLocation = &Q.DriverLocation
	Order = &Q.Order
	Route = &Q.Route
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Businessowner:  newBusinessowner(db, opts...),
		Driver:         newDriver(db, opts...),
		DriverLocation: newDriverLocation(db, opts...),
		Order:          newOrder(db, opts...),
		Route:          newRoute(db, opts...),
		User:           newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Businessowner  businessowner
	Driver         driver
	DriverLocation driverLocation
	Order          order
	Route          route
	User           user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Businessowner:  q.Businessowner.clone(db),
		Driver:         q.Driver.clone(db),
		DriverLocation: q.DriverLocation.clone(db),
		Order:          q.Order.clone(db),
		Route:          q.Route.clone(db),
		User:           q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Businessowner:  q.Businessowner.replaceDB(db),
		Driver:         q.Driver.replaceDB(db),
		DriverLocation: q.DriverLocation.replaceDB(db),
		Order:          q.Order.replaceDB(db),
		Route:          q.Route.replaceDB(db),
		User:           q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Businessowner  IBusinessownerDo
	Driver         IDriverDo
	DriverLocation IDriverLocationDo
	Order          IOrderDo
	Route          IRouteDo
	User           IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Businessowner:  q.Businessowner.WithContext(ctx),
		Driver:         q.Driver.WithContext(ctx),
		DriverLocation: q.DriverLocation.WithContext(ctx),
		Order:          q.Order.WithContext(ctx),
		Route:          q.Route.WithContext(ctx),
		User:           q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
