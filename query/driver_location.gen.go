// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDriverLocation(db *gorm.DB, opts ...gen.DOOption) driverLocation {
	_driverLocation := driverLocation{}

	_driverLocation.driverLocationDo.UseDB(db, opts...)
	_driverLocation.driverLocationDo.UseModel(&model.DriverLocation{})

	tableName := _driverLocation.driverLocationDo.TableName()
	_driverLocation.ALL = field.NewAsterisk(tableName)
	_driverLocation.DriverID = field.NewString(tableName, "driver_id")
	_driverLocation.Location = field.NewString(tableName, "location")
	_driverLocation.CreatedAt = field.NewTime(tableName, "created_at")

	_driverLocation.fillFieldMap()

	return _driverLocation
}

type driverLocation struct {
	driverLocationDo

	ALL       field.Asterisk
	DriverID  field.String
	Location  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d driverLocation) Table(newTableName string) *driverLocation {
	d.driverLocationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d driverLocation) As(alias string) *driverLocation {
	d.driverLocationDo.DO = *(d.driverLocationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *driverLocation) updateTableName(table string) *driverLocation {
	d.ALL = field.NewAsterisk(table)
	d.DriverID = field.NewString(table, "driver_id")
	d.Location = field.NewString(table, "location")
	d.CreatedAt = field.NewTime(table, "created_at")

	d.fillFieldMap()

	return d
}

func (d *driverLocation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *driverLocation) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["driver_id"] = d.DriverID
	d.fieldMap["location"] = d.Location
	d.fieldMap["created_at"] = d.CreatedAt
}

func (d driverLocation) clone(db *gorm.DB) driverLocation {
	d.driverLocationDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d driverLocation) replaceDB(db *gorm.DB) driverLocation {
	d.driverLocationDo.ReplaceDB(db)
	return d
}

type driverLocationDo struct{ gen.DO }

type IDriverLocationDo interface {
	gen.SubQuery
	Debug() IDriverLocationDo
	WithContext(ctx context.Context) IDriverLocationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDriverLocationDo
	WriteDB() IDriverLocationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDriverLocationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDriverLocationDo
	Not(conds ...gen.Condition) IDriverLocationDo
	Or(conds ...gen.Condition) IDriverLocationDo
	Select(conds ...field.Expr) IDriverLocationDo
	Where(conds ...gen.Condition) IDriverLocationDo
	Order(conds ...field.Expr) IDriverLocationDo
	Distinct(cols ...field.Expr) IDriverLocationDo
	Omit(cols ...field.Expr) IDriverLocationDo
	Join(table schema.Tabler, on ...field.Expr) IDriverLocationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDriverLocationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDriverLocationDo
	Group(cols ...field.Expr) IDriverLocationDo
	Having(conds ...gen.Condition) IDriverLocationDo
	Limit(limit int) IDriverLocationDo
	Offset(offset int) IDriverLocationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDriverLocationDo
	Unscoped() IDriverLocationDo
	Create(values ...*model.DriverLocation) error
	CreateInBatches(values []*model.DriverLocation, batchSize int) error
	Save(values ...*model.DriverLocation) error
	First() (*model.DriverLocation, error)
	Take() (*model.DriverLocation, error)
	Last() (*model.DriverLocation, error)
	Find() ([]*model.DriverLocation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DriverLocation, err error)
	FindInBatches(result *[]*model.DriverLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DriverLocation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDriverLocationDo
	Assign(attrs ...field.AssignExpr) IDriverLocationDo
	Joins(fields ...field.RelationField) IDriverLocationDo
	Preload(fields ...field.RelationField) IDriverLocationDo
	FirstOrInit() (*model.DriverLocation, error)
	FirstOrCreate() (*model.DriverLocation, error)
	FindByPage(offset int, limit int) (result []*model.DriverLocation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDriverLocationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d driverLocationDo) Debug() IDriverLocationDo {
	return d.withDO(d.DO.Debug())
}

func (d driverLocationDo) WithContext(ctx context.Context) IDriverLocationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d driverLocationDo) ReadDB() IDriverLocationDo {
	return d.Clauses(dbresolver.Read)
}

func (d driverLocationDo) WriteDB() IDriverLocationDo {
	return d.Clauses(dbresolver.Write)
}

func (d driverLocationDo) Session(config *gorm.Session) IDriverLocationDo {
	return d.withDO(d.DO.Session(config))
}

func (d driverLocationDo) Clauses(conds ...clause.Expression) IDriverLocationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d driverLocationDo) Returning(value interface{}, columns ...string) IDriverLocationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d driverLocationDo) Not(conds ...gen.Condition) IDriverLocationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d driverLocationDo) Or(conds ...gen.Condition) IDriverLocationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d driverLocationDo) Select(conds ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d driverLocationDo) Where(conds ...gen.Condition) IDriverLocationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d driverLocationDo) Order(conds ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d driverLocationDo) Distinct(cols ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d driverLocationDo) Omit(cols ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d driverLocationDo) Join(table schema.Tabler, on ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d driverLocationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d driverLocationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d driverLocationDo) Group(cols ...field.Expr) IDriverLocationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d driverLocationDo) Having(conds ...gen.Condition) IDriverLocationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d driverLocationDo) Limit(limit int) IDriverLocationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d driverLocationDo) Offset(offset int) IDriverLocationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d driverLocationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDriverLocationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d driverLocationDo) Unscoped() IDriverLocationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d driverLocationDo) Create(values ...*model.DriverLocation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d driverLocationDo) CreateInBatches(values []*model.DriverLocation, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d driverLocationDo) Save(values ...*model.DriverLocation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d driverLocationDo) First() (*model.DriverLocation, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DriverLocation), nil
	}
}

func (d driverLocationDo) Take() (*model.DriverLocation, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DriverLocation), nil
	}
}

func (d driverLocationDo) Last() (*model.DriverLocation, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DriverLocation), nil
	}
}

func (d driverLocationDo) Find() ([]*model.DriverLocation, error) {
	result, err := d.DO.Find()
	return result.([]*model.DriverLocation), err
}

func (d driverLocationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DriverLocation, err error) {
	buf := make([]*model.DriverLocation, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d driverLocationDo) FindInBatches(result *[]*model.DriverLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d driverLocationDo) Attrs(attrs ...field.AssignExpr) IDriverLocationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d driverLocationDo) Assign(attrs ...field.AssignExpr) IDriverLocationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d driverLocationDo) Joins(fields ...field.RelationField) IDriverLocationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d driverLocationDo) Preload(fields ...field.RelationField) IDriverLocationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d driverLocationDo) FirstOrInit() (*model.DriverLocation, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DriverLocation), nil
	}
}

func (d driverLocationDo) FirstOrCreate() (*model.DriverLocation, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DriverLocation), nil
	}
}

func (d driverLocationDo) FindByPage(offset int, limit int) (result []*model.DriverLocation, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d driverLocationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d driverLocationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d driverLocationDo) Delete(models ...*model.DriverLocation) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *driverLocationDo) withDO(do gen.Dao) *driverLocationDo {
	d.DO = *do.(*gen.DO)
	return d
}
