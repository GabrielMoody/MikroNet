// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newBusinessowner(db *gorm.DB, opts ...gen.DOOption) businessowner {
	_businessowner := businessowner{}

	_businessowner.businessownerDo.UseDB(db, opts...)
	_businessowner.businessownerDo.UseModel(&model.Businessowner{})

	tableName := _businessowner.businessownerDo.TableName()
	_businessowner.ALL = field.NewAsterisk(tableName)
	_businessowner.ID = field.NewString(tableName, "id")
	_businessowner.Nik = field.NewString(tableName, "nik")
	_businessowner.Verified = field.NewBool(tableName, "verified")
	_businessowner.CreatedAt = field.NewTime(tableName, "created_at")
	_businessowner.UpdatedAt = field.NewTime(tableName, "updated_at")

	_businessowner.fillFieldMap()

	return _businessowner
}

type businessowner struct {
	businessownerDo

	ALL       field.Asterisk
	ID        field.String
	Nik       field.String
	Verified  field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (b businessowner) Table(newTableName string) *businessowner {
	b.businessownerDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b businessowner) As(alias string) *businessowner {
	b.businessownerDo.DO = *(b.businessownerDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *businessowner) updateTableName(table string) *businessowner {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.Nik = field.NewString(table, "nik")
	b.Verified = field.NewBool(table, "verified")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")

	b.fillFieldMap()

	return b
}

func (b *businessowner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *businessowner) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["nik"] = b.Nik
	b.fieldMap["verified"] = b.Verified
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
}

func (b businessowner) clone(db *gorm.DB) businessowner {
	b.businessownerDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b businessowner) replaceDB(db *gorm.DB) businessowner {
	b.businessownerDo.ReplaceDB(db)
	return b
}

type businessownerDo struct{ gen.DO }

type IBusinessownerDo interface {
	gen.SubQuery
	Debug() IBusinessownerDo
	WithContext(ctx context.Context) IBusinessownerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusinessownerDo
	WriteDB() IBusinessownerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusinessownerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusinessownerDo
	Not(conds ...gen.Condition) IBusinessownerDo
	Or(conds ...gen.Condition) IBusinessownerDo
	Select(conds ...field.Expr) IBusinessownerDo
	Where(conds ...gen.Condition) IBusinessownerDo
	Order(conds ...field.Expr) IBusinessownerDo
	Distinct(cols ...field.Expr) IBusinessownerDo
	Omit(cols ...field.Expr) IBusinessownerDo
	Join(table schema.Tabler, on ...field.Expr) IBusinessownerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessownerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusinessownerDo
	Group(cols ...field.Expr) IBusinessownerDo
	Having(conds ...gen.Condition) IBusinessownerDo
	Limit(limit int) IBusinessownerDo
	Offset(offset int) IBusinessownerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessownerDo
	Unscoped() IBusinessownerDo
	Create(values ...*model.Businessowner) error
	CreateInBatches(values []*model.Businessowner, batchSize int) error
	Save(values ...*model.Businessowner) error
	First() (*model.Businessowner, error)
	Take() (*model.Businessowner, error)
	Last() (*model.Businessowner, error)
	Find() ([]*model.Businessowner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Businessowner, err error)
	FindInBatches(result *[]*model.Businessowner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Businessowner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusinessownerDo
	Assign(attrs ...field.AssignExpr) IBusinessownerDo
	Joins(fields ...field.RelationField) IBusinessownerDo
	Preload(fields ...field.RelationField) IBusinessownerDo
	FirstOrInit() (*model.Businessowner, error)
	FirstOrCreate() (*model.Businessowner, error)
	FindByPage(offset int, limit int) (result []*model.Businessowner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusinessownerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b businessownerDo) Debug() IBusinessownerDo {
	return b.withDO(b.DO.Debug())
}

func (b businessownerDo) WithContext(ctx context.Context) IBusinessownerDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b businessownerDo) ReadDB() IBusinessownerDo {
	return b.Clauses(dbresolver.Read)
}

func (b businessownerDo) WriteDB() IBusinessownerDo {
	return b.Clauses(dbresolver.Write)
}

func (b businessownerDo) Session(config *gorm.Session) IBusinessownerDo {
	return b.withDO(b.DO.Session(config))
}

func (b businessownerDo) Clauses(conds ...clause.Expression) IBusinessownerDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b businessownerDo) Returning(value interface{}, columns ...string) IBusinessownerDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b businessownerDo) Not(conds ...gen.Condition) IBusinessownerDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b businessownerDo) Or(conds ...gen.Condition) IBusinessownerDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b businessownerDo) Select(conds ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b businessownerDo) Where(conds ...gen.Condition) IBusinessownerDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b businessownerDo) Order(conds ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b businessownerDo) Distinct(cols ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b businessownerDo) Omit(cols ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b businessownerDo) Join(table schema.Tabler, on ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b businessownerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b businessownerDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b businessownerDo) Group(cols ...field.Expr) IBusinessownerDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b businessownerDo) Having(conds ...gen.Condition) IBusinessownerDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b businessownerDo) Limit(limit int) IBusinessownerDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b businessownerDo) Offset(offset int) IBusinessownerDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b businessownerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusinessownerDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b businessownerDo) Unscoped() IBusinessownerDo {
	return b.withDO(b.DO.Unscoped())
}

func (b businessownerDo) Create(values ...*model.Businessowner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b businessownerDo) CreateInBatches(values []*model.Businessowner, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b businessownerDo) Save(values ...*model.Businessowner) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b businessownerDo) First() (*model.Businessowner, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Businessowner), nil
	}
}

func (b businessownerDo) Take() (*model.Businessowner, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Businessowner), nil
	}
}

func (b businessownerDo) Last() (*model.Businessowner, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Businessowner), nil
	}
}

func (b businessownerDo) Find() ([]*model.Businessowner, error) {
	result, err := b.DO.Find()
	return result.([]*model.Businessowner), err
}

func (b businessownerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Businessowner, err error) {
	buf := make([]*model.Businessowner, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b businessownerDo) FindInBatches(result *[]*model.Businessowner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b businessownerDo) Attrs(attrs ...field.AssignExpr) IBusinessownerDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b businessownerDo) Assign(attrs ...field.AssignExpr) IBusinessownerDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b businessownerDo) Joins(fields ...field.RelationField) IBusinessownerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b businessownerDo) Preload(fields ...field.RelationField) IBusinessownerDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b businessownerDo) FirstOrInit() (*model.Businessowner, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Businessowner), nil
	}
}

func (b businessownerDo) FirstOrCreate() (*model.Businessowner, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Businessowner), nil
	}
}

func (b businessownerDo) FindByPage(offset int, limit int) (result []*model.Businessowner, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b businessownerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b businessownerDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b businessownerDo) Delete(models ...*model.Businessowner) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *businessownerDo) withDO(do gen.Dao) *businessownerDo {
	b.DO = *do.(*gen.DO)
	return b
}
